name: Build

on: [push, pull_request]

env:

  CIBW_MANYLINUX_X86_64_IMAGE: skhep/manylinuxgcc-x86_64

jobs:
  build_wheels:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, windows-latest, macos-latest]
        cibw_python: ["cp35-*","cp36-*", "cp37-*", "cp38-*", ]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==1.6.4

      - name: Build wheels (Linux)
        if: contains(matrix.os, 'ubuntu')
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          FC: gfortran

      - name: Build wheels (Windows)
        if: contains(matrix.os, 'windows')
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          CIBW_SKIP: "*-win32"
          FC: gfortran
          EXTRA_LINK_FLAGS: -static
          FORCE_COMPILER: mingw32



      - name: Setup gfortran (MacOS)
        if: contains(matrix.os, 'macos')
        run: |
          ln -s /usr/local/bin/gfortran-10 /usr/local/bin/gfortran



      - name: Build wheels (MacOS)
        if: contains(matrix.os, 'macos')
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: ${{ matrix.cibw_python }}
          FC: gfortran-10

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl
  

  upload_pypi:
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    needs: [build_wheels]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/