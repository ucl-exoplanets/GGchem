name: Build Wheels

on:
  workflow_dispatch:
  release:
    types:
      - published
permissions:
   contents: read  # to fetch code (actions/checkout)


jobs:
  build_wheels:
    name: Build wheel for ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }} ${{ matrix.buildplat[2] }}
    runs-on: ${{ matrix.buildplat[0] }}

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        # Github Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        buildplat:
        # should also be able to do multi-archs on a single entry, e.g.
        # [windows-2019, win*, "AMD64 x86"]. However, those two require a different compiler setup
        # so easier to separate out here.
        - [ubuntu-22.04, manylinux, x86_64,  ""]
        - [ubuntu-22.04, musllinux, x86_64, ""]
        - [macos-12, macosx, x86_64, "10.9"]
        - [macos-14, macosx, arm64, "12.0"]
        - [windows-2019, win, AMD64, ""]

        python: [["cp39", "3.9"], ["cp310", "3.10"], ["cp311", "3.11"], ["cp312", "3.12"]]
        # python[0] is used to specify the python versions made by cibuildwheel

    env:
      IS_32_BIT: ${{ matrix.buildplat[2] == 'x86' }}
      # upload to staging if it's a push to a maintenance branch and the last
      # commit message contains '[wheel build]'
      IS_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/heads/maintenance') && contains(needs.get_commit_message.outputs.message, '1') }}
      IS_SCHEDULE_DISPATCH: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout acepython
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: win_amd64 - install rtools
        run: |
          # mingw-w64
          choco install rtools -y --no-progress --force --version=4.0.0.20220206
          echo "c:\rtools40\ucrt64\bin;" >> $env:GITHUB_PATH
        if: ${{ runner.os == 'Windows' && env.IS_32_BIT == 'false' }}

#      - name: win32 - configure mingw for 32-bit builds
#        run: |
#          # taken from numpy wheels.yml script
#          # Force 32-bit mingw. v 8.1.0 is the current version used to build
#          # the 32 bit openBLAS library (not sure if that matters)
#          choco uninstall mingw
#          choco install -y mingw --forcex86 --force --version=8.1.0
#          echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw32\bin;" >> $env:GITHUB_PATH
#          echo $(gfortran --version)
#          echo $(gcc --version)
#        if: ${{ runner.os == 'Windows' && env.IS_32_BIT == 'true' }}

      - name: Setup macOS
        if: startsWith( matrix.buildplat[0], 'macos-' )
        run: |
          # Add libraries installed by cibw_before_build_macos.sh to path
          if [[ ${{ matrix.buildplat[2] }} == 'arm64' ]]; then
            LIB_PATH=$LIB_PATH:/opt/arm64-builds/lib
          else
            LIB_PATH=$LIB_PATH:/usr/local/lib
          fi
          if [[ ${{ matrix.buildplat[3] }} == '10.9' ]]; then
            # Newest version of Xcode that supports macOS 10.9
            XCODE_VER='13.4.1'
          else
            XCODE_VER='15.2'
          fi
          CIBW="sudo xcode-select -s /Applications/Xcode_${XCODE_VER}.app"
          echo "CIBW_BEFORE_ALL=$CIBW" >> $GITHUB_ENV
          # setting SDKROOT necessary when using the gfortran compiler
          # installed in cibw_before_build_macos.sh
          sudo xcode-select -s /Applications/Xcode_${XCODE_VER}.app
          CIBW="MACOSX_DEPLOYMENT_TARGET=${{ matrix.buildplat[3] }}\
            LD_LIBRARY_PATH=$LIB_PATH:$LD_LIBRARY_PATH\
            SDKROOT=$(xcrun --sdk macosx --show-sdk-path)\
            PIP_PRE=1\
            PIP_NO_BUILD_ISOLATION=false\
            PKG_CONFIG_PATH=$LIB_PATH/pkgconfig\
            PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple"
          echo "CIBW_ENVIRONMENT_MACOS=$CIBW" >> "$GITHUB_ENV"

          echo "REPAIR_PATH=$LIB_PATH" >> "$GITHUB_ENV"
          GFORTRAN_LIB="\$(dirname \$(gfortran --print-file-name libgfortran.dylib))"
          CIBW="DYLD_LIBRARY_PATH=$GFORTRAN_LIB:$LIB_PATH delocate-listdeps {wheel} &&\
            DYLD_LIBRARY_PATH=$GFORTRAN_LIB:$LIB_PATH delocate-wheel --require-archs \
            {delocate_archs} -w {dest_dir} {wheel}"
          echo "CIBW_REPAIR_WHEEL_COMMAND_MACOS=$CIBW" >> "$GITHUB_ENV"


      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.5
        env:
          CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}*
          CIBW_ARCHS: ${{ matrix.buildplat[2] }}
          CIBW_ENVIRONMENT_PASS_LINUX: RUNNER_OS
          CIBW_PRERELEASE_PYTHONS: True

          # TODO remove the CIBW_BEFORE_BUILD_* lines once there are
          #  numpy2.0 wheels available on PyPI. Also remove/comment out the
          # PIP_NO_BUILD_ISOLATION and PIP_EXTRA_INDEX_URL from CIBW_ENVIRONMENT
          # (also for _MACOS and _WINDOWS below)
          CIBW_BEFORE_BUILD_LINUX: "pip install numpy>=2.0.0.dev0 meson-python ninja; bash {project}/tools/wheels/cibw_before_build_linux.sh {project}"
          CIBW_BEFORE_BUILD_WINDOWS: "pip install numpy>=2.0.0.dev0 meson-python ninja delvewheel"
          CIBW_BEFORE_BUILD_MACOS: "pip install numpy>=2.0.0.dev0 meson-python ninja; bash {project}/tools/wheels/cibw_before_build_macos.sh {project}"
          # Allow pip to find install nightly wheels if necessary
          # Setting PIP_NO_BUILD_ISOLATION=false makes pip use build-isolation.
          CIBW_ENVIRONMENT: "PIP_NO_BUILD_ISOLATION=false PIP_PRE=1 PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple"

          CIBW_ENVIRONMENT_WINDOWS: >
            PKG_CONFIG_PATH=c:/opt/64/lib/pkgconfig
            PIP_PRE=1
            PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
            PIP_NO_BUILD_ISOLATION=false

          # setting SDKROOT necessary when using the gfortran compiler
          # installed in cibw_before_build_macos.sh
          # MACOS_DEPLOYMENT_TARGET is set because of
          # https://github.com/mesonbuild/meson-python/pull/309. Once
          # an update is released, then that environment variable can
          # be removed.
          # CIBW_ENVIRONMENT_MACOS: >
          #   SDKROOT=/Applications/Xcode_11.7.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk
          #   LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
          #   MACOSX_DEPLOYMENT_TARGET=10.9
          #   MACOS_DEPLOYMENT_TARGET=10.9
          #   _PYTHON_HOST_PLATFORM=macosx-10.9-x86_64
          #   PIP_PRE=1
          #   PIP_EXTRA_INDEX_URL=https://pypi.anaconda.org/scientific-python-nightly-wheels/simple
          #   PIP_NO_BUILD_ISOLATION=false

          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            DYLD_LIBRARY_PATH=/usr/local/lib delocate-listdeps {wheel} &&
            DYLD_LIBRARY_PATH=/usr/local/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}

          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: "pytest {project}/tests"

      - uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: cibw-${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}-${{ matrix.buildplat[2] }}


  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Build source distribution
        run: bash tools/build_sdist.sh

      - name: Test source distribution
        run: bash tools/test_sdist.sh

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi_release:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
      contents: write
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist/
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.pypi_apikey }}

      - uses: softprops/action-gh-release@v1
        if: ${{startsWith(github.ref, 'refs/tags/') }}
        with:
          files: dist/*